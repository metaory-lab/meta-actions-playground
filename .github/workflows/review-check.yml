name: "ApprovalStatus"

on:
  workflow_dispatch:
  pull_request:
    types: [synchronizer, opened, reopened]
  pull_request_review:
    types: [submitted]
  # check_run:
  #   types: [created]

permissions:
#   actions: write
#   contents: write
#   pull-requests: write
#   checks: write
  statuses: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  main:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: approval status
        env:
          GH_TOKEN: ${{ github.token }}

          HOTFIX_PREFIX: ${{ vars.CHECK_HOTFIX_PREFIX }}
          HOTFIX_MIN_APPROVALS: ${{ vars.CHECK_HOTFIX_MIN_APPROVALS }}

          FLIGHT_PREFIX: ${{ vars.CHECK_FLIGHT_PREFIX }}
          FLIGHT_MIN_APPROVALS: ${{ vars.CHECK_FLIGHT_MIN_APPROVALS }}

          TARGET_URL: ${{ vars.CHECK_TARGET_URL }}
          DESCRIPTION: ${{ vars.CHECK_DESCRIPTION }}
          CONTEXT: ${{ vars.CHECK_NAME }}
        run: |
          # Pull Request Number from the event path
          pr_num=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

          # List reviews for a pull request
          # https://docs.github.com/en/rest/pulls/reviews?apiVersion=2022-11-28#list-reviews-for-a-pull-request
          raw=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pulls/${pr_num}/reviews)

          # Filter reviwers to APPROVED only
          users=()
          for row in $(echo "${raw}" | jq -r '.[] | @base64'); do
            _jq() {
              echo "${row}" | base64 --decode | jq -r "${1}"
            }
            state=$(_jq '.state')

            user=$(_jq '.user.login')

            case $state in
            'APPROVED')
              users+=("${user}")
              ;;
            'CHANGES_REQUESTED')
              # shellcheck disable=SC2206
              users=(${users[@]/${user}/})
              ;;
            *) ;;
            esac
          done

          # Deduplicate reviwers
          declare -A uniq_tmp
          for item in "${users[@]}"; do
            uniq_tmp[$item]=0
          done

          # Total Unique Approved Reviews
          approved_count="${#uniq_tmp[@]}"

          # Total Expected Reviews
          total_expected_count=$(echo '${{ toJson(github.event.pull_request.requested_reviewers) }}' | jq '. | length')

          # PR Source Branch
          branch="${{ github.event.pull_request.head.ref }}"

          # Default Commit Status
          state=failure

          # Success Condition for Hotfix
          if [[ $branch == ${HOTFIX_PREFIX}* ]] && [[ ${approved_count} -ge $HOTFIX_MIN_APPROVALS ]]; then
            state=success
          fi

          # Success Condition for Flight
          if [[ $branch == ${FLIGHT_PREFIX}* ]] && [[ ${approved_count} -ge $FLIGHT_MIN_APPROVALS ]]; then
            state=success
          fi

          # Success Condition for anything Else
          if ! [[ $branch == ${FLIGHT_PATTERN}* ]] && ! [[ $branch == ${HOTFIX_PATTERN}* ]]; then
            if [[ ${approved_count} -ge $total_expected_count ]]; then
              state=success
            fi
          fi

          # ### [ DEBUG ] ### #
          echo "state           :" "${state}"
          echo "branch          :" "${branch}"
          echo "total count     :" "${#users[@]}"
          echo "xotal count     :" "${total_expected_count}"
          echo "unique count    :" "${#uniq_tmp[@]}"
          echo "unique approval :" "${!uniq_tmp[@]}"
          # ###################

          # Create Commit status
          # https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#create-a-commit-status
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -d "{\"state\":\"${state}\",\"target_url\":\"${TARGET_URL}\",\"description\":\"${DESCRIPTION}\",\"context\":\"${CONTEXT}\"}"
