name: "ReviewCheck"

on:
  workflow_dispatch:
  pull_request:
    types: [synchronizer,opened,reopened]
  pull_request_review:
    types: [submitted]
  check_run:
    types: [created]

permissions:
  actions: write
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: fake
        run: echo 'hello world'
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: get the count of requested reviewers 1
        run: |
          # len=$(echo $requested_reviewers | jq '. | length')
          len=$(echo '${{ toJson(github.event.pull_request.requested_reviewers) }}' | jq '. | length')
          echo "len = $len"
      - name: get the count of requested reviewers 2
        run: |
          length=$(echo $requested_reviewers | jq '. | length')
          echo "length = $length"
        env:
          requested_reviewers: ${{ toJson(github.event.pull_request.requested_reviewers) }}
      - name: get the count of requested reviewers 3
        run: echo "reviwers = ${{ toJson(github.event.pull_request.requested_reviewers) }}"
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      # - name: Extract branch name
      #   shell: bash
      #   run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
      #   id: extract_branch
      # - name: echo branch name
      #   run: echo "branch = ${{ steps.extract_branch.outputs.branch }}"
      - name: echo branch name
        run: echo "branch = ${{ github.event.pull_request.head.ref }}"
      # - name: List reviews on the pull request
      #   shell: bash
      #   run: |
      #     token=${{ secrets.GITHUB_TOKEN }}
      #     base64AuthInfo='$token | base64 -e'
      #     response=$(curl --request GET \
      #     --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
      #     --header 'Authorization: $base64AuthInfo' \
      #     --header 'Content-Type: application/json')
      #     total=$(echo $response | jq '.[] | select(.state=="APPROVED")')
      #     echo "total = $total"
      #     # echo $response | ConvertTo-Json | jq '.[] | select(.state=="APPROVED")'

      - name: PR Number
        run: |
          pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "PR NUM: $pull_number"
      - name: unique approvals
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          pr_num=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          raw=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/pulls/${pr_num}/reviews)

          users=()

          for row in $(echo "${raw}" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            state=$(_jq '.state')

            user=$(_jq '.user.login')

            if [[ $state == 'APPROVED' ]]; then
              users+=(${user})
            fi

            if [[ $state == 'CHANGES_REQUESTED' ]]; then
              echo "remove: $user"
              users=(${users[@]/$user/})
            fi
          done

          echo '+++++++++++++++++++++++++++++++++++++++++++'

          declare -A uniq_tmp

          for ip in "${users[@]}"; do
            uniq_tmp[$ip]=0 # assigning a placeholder
          done

          echo "unique approval: ${!uniq_tmp[@]}" # only the keys
          echo "approvals count: ${#uniq_tmp[@]}"
      - name: commit-status
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -d '{"state":"failure","target_url":"https://example.com/build/status","description":"The build failed!","context":"review-enforcer"}'

      # - uses: github-actions-tools/gh-reviews-count@v0.0.1
      #   id: reviewsCount
      # - run: echo "The approved reviews count is ${REVIEWS}"
      #   if: success() && steps.reviewsCount.outputs.approved
      #   env:
      #     REVIEWS: ${{ steps.reviewsCount.outputs.approved }}

      - name: TestFail
        run: exit 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
